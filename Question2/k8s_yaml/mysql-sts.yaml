---
apiVersion: v1
kind: Service
metadata:
  namespace: data
  name: mysql-service
spec:
  ports:
  - name: mysql-service
    port: 3306
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: v1
kind: Service
metadata:
  namespace: data
  name: mysql-read-service
spec:
  selector:
    app: mysql
  ports:
  - name: mysql
    protocol: TCP
    port: 3306
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-master
  namespace: data
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql-service
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      nodeSelector:
        mysql: master
      initContainers:
      - name: init-mysql
        image: mysql:8.0.18
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          mkdir -p /mnt/mysql/conf.d
          echo [mysqld] > /mnt/mysql/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + ${BASH_REMATCH[1]})) >> /mnt/mysql/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          cp /mnt/config-map/master.cnf /mnt/mysql/conf.d/
          cp /mnt/config-map/my.cnf /mnt/mysql
        volumeMounts:
        - name: conf
          mountPath: /mnt/mysql
        - name: config-map
          mountPath: /mnt/config-map
      containers:
        - name: mysql
          image: mysql:8.0.18
          ports:
            - containerPort: 3306
          volumeMounts:
          - name: data
            mountPath: /var/lib/mysql
          - name: conf
            mountPath: /etc/mysql
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              # Check we can execute queries over TCP (skip-networking is off).
              command: ["mysql", "-h", "127.0.0.1", "-ureadiness", "-preadiness", "-e", "SELECT 1"]
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      imagePullSecrets:
        - name: image-repo-secret
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: mysql-local-storage
      resources:
        requests:
          storage: 25Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-slave
  namespace: data
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql-service
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      nodeSelector:
        mysql: slave
      initContainers:
      - name: init-mysql
        image: mysql:8.0.18
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          mkdir -p /mnt/mysql/conf.d
          echo [mysqld] > /mnt/mysql/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((200 + ${BASH_REMATCH[1]})) >> /mnt/mysql/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          cp /mnt/config-map/slave.cnf /mnt/mysql/conf.d/
          cp /mnt/config-map/my.cnf /mnt/mysql
        volumeMounts:
        - name: conf
          mountPath: /mnt/mysql
        - name: config-map
          mountPath: /mnt/config-map
      containers:
        - name: mysql
          image: mysql:8.0.18
          ports:
            - containerPort: 3306
          volumeMounts:
          - name: data
            mountPath: /var/lib/mysql
          - name: conf
            mountPath: /etc/mysql
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              # Check we can execute queries over TCP (skip-networking is off).
              command: ["mysql", "-h127.0.0.1", "-ureadiness", "-preadiness", "-e", "SELECT 1"]
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      imagePullSecrets:
        - name: image-repo-secret
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: mysql-local-storage
      resources:
        requests:
          storage: 25Gi
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: mysql-local-storage
  namespace: data
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: data
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: mysql-local-storage
  capacity:
    storage: 25Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mysql"